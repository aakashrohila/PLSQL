--Exercise #5

--PACKAGE CREATION
CREATE OR REPLACE PACKAGE CUSTOMER_PKG 
AS

PROCEDURE ADD_CUSTOMER
(
VAR_CUSTOMER_ID   IN NUMBER,
VAR_FIRST_NAME    IN VARCHAR2,
VAR_LAST_NAME     IN VARCHAR2,
VAR_MIDDLE_NAME   IN VARCHAR2,
VAR_ADDRESS_LINE1 IN VARCHAR2,
VAR_ADDRESS_LINE2 IN VARCHAR2,
VAR_CITY          IN VARCHAR2,
VAR_COUNTRY       IN VARCHAR2,
VAR_DATE_ADDED    IN DATE,
VAR_REGION        IN VARCHAR2
);


PROCEDURE FETCH_SALES_DATA (
VAR_ORDER_ID_IP IN NUMBER
);

PROCEDURE FETCH_SALES_DATA_WITH_DATE(
VAR_SALES_DATE_IN IN DATE,
VAR_SALES_CNT_OUT OUT NUMBER
);

FUNCTION CNT_SALES_DATA(
SALES_DATE_IN IN DATE
)RETURN NUMBER;

FUNCTION FUNC_POWER_N1_TO_N2(
N1 IN NUMBER,
N2 IN NUMBER
)RETURN NUMBER;


END CUSTOMER_PKG;
/

-- PACKAGE BODY

CREATE OR REPLACE PACKAGE BODY CUSTOMER_PKG 
AS
PROCEDURE ADD_CUSTOMER
(
VAR_CUSTOMER_ID   IN NUMBER,
VAR_FIRST_NAME    IN VARCHAR2,
VAR_LAST_NAME     IN VARCHAR2,
VAR_MIDDLE_NAME   IN VARCHAR2,
VAR_ADDRESS_LINE1 IN VARCHAR2,
VAR_ADDRESS_LINE2 IN VARCHAR2,
VAR_CITY          IN VARCHAR2,
VAR_COUNTRY       IN VARCHAR2,
VAR_DATE_ADDED    IN DATE,
VAR_REGION        IN VARCHAR2
)
AS
BEGIN
    INSERT INTO CUSTOMER
    VALUES
    (VAR_CUSTOMER_ID, VAR_FIRST_NAME, VAR_LAST_NAME, VAR_MIDDLE_NAME, VAR_ADDRESS_LINE1, VAR_ADDRESS_LINE2, VAR_CITY, VAR_COUNTRY, VAR_DATE_ADDED, VAR_REGION);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Data Inserted Successfully');
END ADD_CUSTOMER;

PROCEDURE FETCH_SALES_DATA (
VAR_ORDER_ID_IP IN NUMBER
)
AS
VAR_SALES_DATE DATE;
VAR_ORDER_ID NUMBER;
VAR_PRODUCT_ID NUMBER;
VAR_CUSTOMER_ID NUMBER;
VAR_SALESPERSON_ID NUMBER;
VAR_QUANTITY NUMBER;
VAR_UNIT_PRICE NUMBER;
VAR_SALES_AMOUNT NUMBER;
VAR_TAX_AMOUNT NUMBER;
VAR_TOTAL_AMOUNT NUMBER;
BEGIN 

SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
INTO VAR_SALES_DATE, VAR_ORDER_ID, VAR_PRODUCT_ID, VAR_CUSTOMER_ID, VAR_SALESPERSON_ID, VAR_QUANTITY, VAR_UNIT_PRICE, 
    VAR_SALES_AMOUNT, VAR_TAX_AMOUNT, VAR_TOTAL_AMOUNT
FROM SALES 
WHERE ORDER_ID = VAR_ORDER_ID_IP;

DBMS_OUTPUT.PUT_LINE(VAR_SALES_DATE|| ', ' || VAR_ORDER_ID|| ', ' || VAR_PRODUCT_ID|| ', ' || VAR_CUSTOMER_ID|| ', ' || VAR_SALESPERSON_ID|| ', ' || VAR_QUANTITY|| ', ' || VAR_UNIT_PRICE|| ', ' ||     VAR_SALES_AMOUNT|| ', ' || VAR_TAX_AMOUNT|| ', ' || VAR_TOTAL_AMOUNT);

EXCEPTION 
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');

    WHEN TOO_MANY_ROWS THEN DBMS_OUTPUT.PUT_LINE('TOO_MANY_ROWS');

    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR');

END FETCH_SALES_DATA;


PROCEDURE FETCH_SALES_DATA_WITH_DATE(
VAR_SALES_DATE_IN IN DATE,
VAR_SALES_CNT_OUT OUT NUMBER
) AS
VAR_SALES_DATE DATE;
VAR_ORDER_ID NUMBER;
VAR_PRODUCT_ID NUMBER;
VAR_CUSTOMER_ID NUMBER;
VAR_SALESPERSON_ID NUMBER;
VAR_QUANTITY NUMBER;
VAR_UNIT_PRICE NUMBER;
VAR_SALES_AMOUNT NUMBER;
VAR_TAX_AMOUNT NUMBER;
VAR_TOTAL_AMOUNT NUMBER;
BEGIN
    SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
    INTO VAR_SALES_DATE, VAR_ORDER_ID, VAR_PRODUCT_ID, VAR_CUSTOMER_ID, VAR_SALESPERSON_ID, VAR_QUANTITY, VAR_UNIT_PRICE, 
        VAR_SALES_AMOUNT, VAR_TAX_AMOUNT, VAR_TOTAL_AMOUNT
    FROM SALES 
WHERE SALES_DATE = VAR_SALES_DATE_IN; 

    DBMS_OUTPUT.PUT_LINE(VAR_SALES_DATE|| ', ' || VAR_ORDER_ID|| ', ' || VAR_PRODUCT_ID|| ', ' || VAR_CUSTOMER_ID|| ', ' || VAR_SALESPERSON_ID|| ', ' || VAR_QUANTITY|| ', ' || VAR_UNIT_PRICE|| ', ' ||     VAR_SALES_AMOUNT|| ', ' || VAR_TAX_AMOUNT|| ', ' || VAR_TOTAL_AMOUNT);

    SELECT COUNT(1) INTO VAR_SALES_CNT_OUT FROM SALES WHERE SALES_DATE = VAR_SALES_DATE_IN; 

EXCEPTION 
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND');

    WHEN TOO_MANY_ROWS THEN DBMS_OUTPUT.PUT_LINE('TOO_MANY_ROWS');

    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('ERROR');

END FETCH_SALES_DATA_WITH_DATE;


 FUNCTION CNT_SALES_DATA(
SALES_DATE_IN IN DATE
)
RETURN NUMBER
AS
CNT NUMBER;
BEGIN
    SELECT COUNT(1) INTO CNT FROM SALES
    WHERE SALES_DATE = SALES_DATE_IN;

    RETURN CNT;

END CNT_SALES_DATA;

 FUNCTION FUNC_POWER_N1_TO_N2(
N1 IN NUMBER,
N2 IN NUMBER
) RETURN NUMBER
AS
N1_N2 NUMBER;
BEGIN

    N1_N2 := POWER(N1,N2);

    RETURN N1_N2;

END FUNC_POWER_N1_TO_N2;


END CUSTOMER_PKG;
/

SELECT *
FROM SALES;

EXECUTE CUSTOMER_PKG.FETCH_SALES_DATA('1270');


