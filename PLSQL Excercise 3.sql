--Exercise # 3 
--1) Write a procedure to fetch data from table SALES for a given parameter orderid and 
--display the data.  

CREATE PROCEDURE FETCH_SALES_DATA (
VAR_ORDER_ID_IP IN NUMBER
)
AS
VAR_SALES_DATE DATE;
VAR_ORDER_ID NUMBER;
VAR_PRODUCT_ID NUMBER;
VAR_CUSTOMER_ID NUMBER;
VAR_SALESPERSON_ID NUMBER;
VAR_QUANTITY NUMBER;
VAR_UNIT_PRICE NUMBER;
VAR_SALES_AMOUNT NUMBER;
VAR_TAX_AMOUNT NUMBER;
VAR_TOTAL_AMOUNT NUMBER;
BEGIN 

SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
INTO VAR_SALES_DATE, VAR_ORDER_ID, VAR_PRODUCT_ID, VAR_CUSTOMER_ID, VAR_SALESPERSON_ID, VAR_QUANTITY, VAR_UNIT_PRICE, 
    VAR_SALES_AMOUNT, VAR_TAX_AMOUNT, VAR_TOTAL_AMOUNT
FROM SALES 
WHERE ORDER_ID = VAR_ORDER_ID_IP;

DBMS_OUTPUT.PUT_LINE(VAR_SALES_DATE|| ', ' || VAR_ORDER_ID|| ', ' || VAR_PRODUCT_ID|| ', ' || VAR_CUSTOMER_ID|| ', ' || VAR_SALESPERSON_ID|| ', ' || VAR_QUANTITY|| ', ' || VAR_UNIT_PRICE|| ', ' ||     VAR_SALES_AMOUNT|| ', ' || VAR_TAX_AMOUNT|| ', ' || VAR_TOTAL_AMOUNT);

END FETCH_SALES_DATA;
/

BEGIN
FETCH_SALES_DATA('1269');
END;
/
--2) Write a procedure which does the following operations 
--? Fetch data from table SALES for a given parameter DATE and display the data.  
--? Return the number of rows(using OUT parameter) in the SALES table for that 
--sales date (get sales date from the above operation) 

CREATE OR REPLACE PROCEDURE FETCH_SALES_DATA_WITH_DATE(
VAR_SALES_DATE_IN IN DATE,
VAR_SALES_CNT_OUT OUT NUMBER
) AS
VAR_SALES_DATE DATE;
VAR_ORDER_ID NUMBER;
VAR_PRODUCT_ID NUMBER;
VAR_CUSTOMER_ID NUMBER;
VAR_SALESPERSON_ID NUMBER;
VAR_QUANTITY NUMBER;
VAR_UNIT_PRICE NUMBER;
VAR_SALES_AMOUNT NUMBER;
VAR_TAX_AMOUNT NUMBER;
VAR_TOTAL_AMOUNT NUMBER;
BEGIN
    SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
    INTO VAR_SALES_DATE, VAR_ORDER_ID, VAR_PRODUCT_ID, VAR_CUSTOMER_ID, VAR_SALESPERSON_ID, VAR_QUANTITY, VAR_UNIT_PRICE, 
        VAR_SALES_AMOUNT, VAR_TAX_AMOUNT, VAR_TOTAL_AMOUNT
    FROM SALES 
WHERE SALES_DATE = VAR_SALES_DATE_IN; 

    DBMS_OUTPUT.PUT_LINE(VAR_SALES_DATE|| ', ' || VAR_ORDER_ID|| ', ' || VAR_PRODUCT_ID|| ', ' || VAR_CUSTOMER_ID|| ', ' || VAR_SALESPERSON_ID|| ', ' || VAR_QUANTITY|| ', ' || VAR_UNIT_PRICE|| ', ' ||     VAR_SALES_AMOUNT|| ', ' || VAR_TAX_AMOUNT|| ', ' || VAR_TOTAL_AMOUNT);

    SELECT COUNT(1) INTO VAR_SALES_CNT_OUT FROM SALES WHERE SALES_DATE = VAR_SALES_DATE_IN; 

END FETCH_SALES_DATA_WITH_DATE;
/

DECLARE
    VAR_SALES_CNT_OUT NUMBER;  -- Declare the OUT parameter
BEGIN
    FETCH_SALES_DATA_WITH_DATE(TO_DATE('02-01-2015', 'DD-MM-YYYY'), VAR_SALES_CNT_OUT);
    
    DBMS_OUTPUT.PUT_LINE('Total Sales Count: ' || VAR_SALES_CNT_OUT);
END;
/
--3) Write a function which accepts 2 numbers n1 and n2 and returns the power of n1 to n2. 
--(Example: If I pass values 10 and 3, the output should be 1000) 

CREATE OR REPLACE FUNCTION FUNC_POWER_N1_TO_N2(
N1 IN NUMBER,
N2 IN NUMBER
) RETURN NUMBER
AS
N1_N2 NUMBER;
BEGIN
    
    N1_N2 := POWER(N1,N2);
    
    RETURN N1_N2;

END FUNC_POWER_N1_TO_N2;
/

SELECT FUNC_POWER_N1_TO_N2(3,4)
FROM DUAL;

--4) Write a function to display the number of rows in the SALES table for a given sales date. 

CREATE OR REPLACE FUNCTION CNT_SALES_DATA(
SALES_DATE_IN IN DATE
)
RETURN NUMBER
AS
CNT NUMBER;
BEGIN
    SELECT COUNT(1) INTO CNT FROM SALES
    WHERE SALES_DATE = SALES_DATE_IN;
    
    RETURN CNT;
    
END CNT_SALES_DATA;
/
SELECT CNT_SALES_DATA(TO_DATE('09-02-2015','DD-MM-YYYY')) FROM DUAL;