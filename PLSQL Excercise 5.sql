--Write a procedure to fetch data from table SALES for a given parameter orderid and 
--display the data(use ROWTYPE to capture the data) 

CREATE OR REPLACE PROCEDURE FETCH_SALES_DATA_ROWTYPE
(
O_ID IN NUMBER
) 
IS
  SALES_DATA SALES%ROWTYPE;
BEGIN
  
  SELECT * INTO SALES_DATA
  FROM SALES
  WHERE ORDER_ID = O_ID;
  
  DBMS_OUTPUT.PUT_LINE('SALES_DATE: ' || SALES_DATA.SALES_DATE);
  
END FETCH_SALES_DATA_ROWTYPE;
/

EXECUTE FETCH_SALES_DATA_ROWTYPE('1269');


--2) Modify the above procedure to return the row you have stored in the ROWTYPE 
--variable using an OUT parameter.  


CREATE OR REPLACE PROCEDURE FETCH_SALES_DATA_ROWTYPE
(
O_ID IN NUMBER,
SALES_DATA_REC  OUT SALES%ROWTYPE
) 
IS
  SALES_DATA SALES%ROWTYPE;
BEGIN
  
  SELECT * INTO SALES_DATA
  FROM SALES
  WHERE ORDER_ID = O_ID;
  
  SALES_DATA_REC := SALES_DATA;
  
  DBMS_OUTPUT.PUT_LINE('SALES_DATE: ' || SALES_DATA.SALES_DATE);
  
END FETCH_SALES_DATA_ROWTYPE;
/

SELECT * FROM SALES;

--3) Write a procedure to call the above procedure and display the data.

CREATE PROCEDURE DISPLAY_SALES_DATA 
IS
    SALES_DATA_REC SALES%ROWTYPE;
BEGIN
    FETCH_SALES_DATA_ROWTYPE('1269',SALES_DATA_REC);
    
    DBMS_OUTPUT.PUT_LINE(SALES_DATA_REC.TOTAL_AMOUNT);
    
END DISPLAY_SALES_DATA;
/

EXECUTE DISPLAY_SALES_DATA();


--4) Perform the following steps. 
--? Create a table SALES_COPY which is similar to SALES table. 
--? Write a procedure to call the procedure you have created in #2 and insert the 
--data in the SALES_COPY table. 

CREATE TABLE SALES_COPY AS
SELECT *
FROM SALES 
WHERE 1=2;
/

CREATE OR REPLACE PROCEDURE INSERT_SALES_DATA
(
O_ID IN NUMBER
)
IS
SALES_DATA_ROWTYPE SALES%ROWTYPE;
BEGIN
    FETCH_SALES_DATA_ROWTYPE(O_ID,SALES_DATA_ROWTYPE);
    
    INSERT INTO SALES_COPY
    VALUES
    SALES_DATA_ROWTYPE;

END INSERT_SALES_DATA;
/

SELECT * FROM SALES_COPY;

EXECUTE INSERT_SALES_DATA(1269);
/
--
--5) Write a procedure to call the procedure you have created in #2 and update the column 
--TOTAL_AMOUNT to SALES_AMOUNT + TAX_AMOUNT in the SALES table. 



CREATE OR REPLACE PROCEDURE UPDATE_SALES_DATA
(
O_ID IN NUMBER
)
IS
    SALES_DATA_RECORD SALES%ROWTYPE;

BEGIN
    FETCH_SALES_DATA_ROWTYPE(O_ID, SALES_DATA_RECORD);
    
    SALES_DATA_RECORD.TOTAL_AMOUNT := SALES_DATA_RECORD.SALES_AMOUNT + SALES_DATA_RECORD.TAX_AMOUNT;
    
    UPDATE SALES
    SET ROW = SALES_DATA_RECORD
    WHERE ORDER_ID = O_ID;

END UPDATE_SALES_DATA;
/

SELECT * FROM SALES WHERE ORDER_ID = '1269';

EXECUTE UPDATE_SALES_DATA(1269);
/

--6) Write a procedure to fetch SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID and 
--QUANTITY from SALES table and display the data. (Use a User defined record type). 

CREATE PROCEDURE FETCH_SALES_DATA_RECORD
(
O_ID IN NUMBER
)
IS
TYPE UD_SALES_RECORD IS RECORD
(
SALES_DATE DATE,
ORDER_ID NUMBER,
PRODUCT_ID NUMBER,
CUSTOMER_ID NUMBER
);

SALES_DATA_RECORD UD_SALES_RECORD;

BEGIN
    
    SELECT SALES_DATE,ORDER_ID,PRODUCT_ID,CUSTOMER_ID 
    INTO SALES_DATA_RECORD
    FROM SALES
    WHERE ORDER_ID = O_ID;
    
    DBMS_OUTPUT.PUT_LINE(SALES_DATA_RECORD.SALES_DATE);
    DBMS_OUTPUT.PUT_LINE(SALES_DATA_RECORD.ORDER_ID);
    DBMS_OUTPUT.PUT_LINE(SALES_DATA_RECORD.PRODUCT_ID);
    DBMS_OUTPUT.PUT_LINE(SALES_DATA_RECORD.CUSTOMER_ID);
END FETCH_SALES_DATA_RECORD;
/
EXECUTE FETCH_SALES_DATA_RECORD(1269);