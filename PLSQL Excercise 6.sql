--1) Write a procedure to fetch data from table SALES for a given parameter sales date and 
--display all the data(Hint: use Explicit cursors and ROWTYPE) 

SELECT * FROM SALES;

CREATE OR REPLACE PROCEDURE FETCH_SALES_DATA_CURSOR
(
IN_SALES_DATE IN DATE
)
IS
CURSOR C IS
SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
FROM SALES
WHERE SALES_DATE = IN_SALES_DATE;

C_RECORD C%ROWTYPE;

BEGIN
        
    OPEN C;
    
LOOP
    FETCH C INTO C_RECORD;
    EXIT WHEN C%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(C_RECORD.SALES_DATE);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.ORDER_ID);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.PRODUCT_ID);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.CUSTOMER_ID);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.SALESPERSON_ID);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.QUANTITY);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.UNIT_PRICE);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.SALES_AMOUNT);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.TAX_AMOUNT);
    DBMS_OUTPUT.PUT_LINE(C_RECORD.TOTAL_AMOUNT);

END LOOP;
    CLOSE C;
    
END FETCH_SALES_DATA_CURSOR;
/

EXECUTE FETCH_SALES_DATA_CURSOR('01-01-2015');

--
--2) Write a procedure to fetch data from table SALES for a given parameter sales date and 
--display all the data(Hint: use Cursor FOR loop) 

CREATE OR REPLACE PROCEDURE FETCH_SALES_DATA_CURSOR2
(
IN_SALES_DATE IN DATE
)
IS
BEGIN 
    
    FOR CURSOR_FETCH IN 
    (SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
    FROM SALES
    WHERE SALES_DATE = IN_SALES_DATE
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.SALES_DATE);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.ORDER_ID);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.PRODUCT_ID);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.SALESPERSON_ID);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.QUANTITY);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.UNIT_PRICE);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.SALES_AMOUNT);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.TAX_AMOUNT);
        DBMS_OUTPUT.PUT_LINE(CURSOR_FETCH.TOTAL_AMOUNT);
        
    END LOOP;

END FETCH_SALES_DATA_CURSOR2;
/
EXECUTE FETCH_SALES_DATA_CURSOR('01-01-2015');


--3) Write a procedure to fetch data from table SALES for a given parameter sales date and 
--pass that cursor to another program. 
--Write another procedure which calls the above procedure and displays the data.


CREATE OR REPLACE PROCEDURE REF_CURSOR_SALES_DATA
(
IN_SALES_DATE IN DATE,
REF_CURSOR OUT SYS_REFCURSOR
)
IS
BEGIN 
    OPEN REF_CURSOR FOR 
    SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT
    FROM SALES
    WHERE SALES_DATE = IN_SALES_DATE;
        
END REF_CURSOR_SALES_DATA;
/

CREATE OR REPLACE PROCEDURE CALL_REF_CURSOR_PROCEDURE
(
IN_SALES_DATE IN DATE
)
IS

REF_CURSOR SYS_REFCURSOR;

TYPE UD_RECORD_ROW IS RECORD
(
    SALES_DATE DATE, 
    ORDER_ID NUMBER,
    PRODUCT_ID NUMBER,
    CUSTOMER_ID NUMBER,
    SALESPERSON_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER,
    SALES_AMOUNT NUMBER,
    TAX_AMOUNT NUMBER,
    TOTAL_AMOUNT NUMBER
);
C_RECORD UD_RECORD_ROW;

BEGIN 

    REF_CURSOR_SALES_DATA('01-01-2015',REF_CURSOR);
    
    LOOP
        FETCH REF_CURSOR INTO C_RECORD;
        EXIT WHEN REF_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(C_RECORD.SALES_DATE);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.ORDER_ID);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.PRODUCT_ID);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.SALESPERSON_ID);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.QUANTITY);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.UNIT_PRICE);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.SALES_AMOUNT);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.TAX_AMOUNT);
        DBMS_OUTPUT.PUT_LINE(C_RECORD.TOTAL_AMOUNT);
    END LOOP;
    
    CLOSE REF_CURSOR;
END;
/

EXECUTE CALL_REF_CURSOR_PROCEDURE('01-01-2015');


